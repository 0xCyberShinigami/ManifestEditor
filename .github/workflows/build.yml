name: Build and Release

on: 
  # Trigger on every push to any branch
  push:
    branches:
      - '**'
    tags:
      - 'v*'
  # Trigger on pull requests
  pull_request:
    branches:
      - '**'

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
    - name: Init
      run: |
        # Get short commit SHA for naming
        SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-7)
        
        if [[ "${{ github.ref }}" == refs/tags/* ]]; then
          # For tagged releases
          echo "FILE_NAME=./lib/build/libs/ManifestEditor-${GITHUB_REF_NAME#v}.jar" >> $GITHUB_ENV
          echo "ARTIFACT_NAME=ManifestEditor-${GITHUB_REF_NAME#v}" >> $GITHUB_ENV
          echo "IS_RELEASE=true" >> $GITHUB_ENV
          echo "BUILD_TYPE=release" >> $GITHUB_ENV
        elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
          # For pull requests
          echo "FILE_NAME=./lib/build/libs/ManifestEditor-2.0.jar" >> $GITHUB_ENV
          echo "ARTIFACT_NAME=ManifestEditor-PR${{ github.event.number }}-${SHORT_SHA}" >> $GITHUB_ENV
          echo "IS_RELEASE=false" >> $GITHUB_ENV
          echo "BUILD_TYPE=pull-request" >> $GITHUB_ENV
        else
          # For regular commits
          BRANCH_NAME=$(echo "${{ github.ref_name }}" | sed 's/[^a-zA-Z0-9._-]/-/g')
          echo "FILE_NAME=./lib/build/libs/ManifestEditor-2.0.jar" >> $GITHUB_ENV
          echo "ARTIFACT_NAME=ManifestEditor-${BRANCH_NAME}-${SHORT_SHA}" >> $GITHUB_ENV
          echo "IS_RELEASE=false" >> $GITHUB_ENV
          echo "BUILD_TYPE=commit" >> $GITHUB_ENV
        fi
        
        echo "Short SHA: ${SHORT_SHA}"
        echo "Build type: ${{ env.BUILD_TYPE }}"
        
    - name: Checkout Repo
      uses: actions/checkout@v4
      
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: 8
        
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v3
      with:
        gradle-version: 5.4
        
    - name: Make gradlew executable
      run: chmod +x ./gradlew
      
    - name: Build with Gradle
      run: ./gradlew clean build
      
    - name: Verify JAR exists
      run: |
        echo "Looking for JAR file: ${{ env.FILE_NAME }}"
        ls -la ./lib/build/libs/
        if [ ! -f "${{ env.FILE_NAME }}" ]; then
          echo "JAR file not found at expected location"
          exit 1
        fi
        
    - name: Upload JAR as Artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.ARTIFACT_NAME }}
        path: ${{ env.FILE_NAME }}
        retention-days: 30
        
    - name: Create Release (only for tags)
      if: env.IS_RELEASE == 'true'
      uses: ncipollo/release-action@v1
      with:
        artifacts: ${{ env.FILE_NAME }}
        artifactContentType: "application/java-archive"
        artifactErrorsFailBuild: true
        generateReleaseNotes: true
        makeLatest: "latest"
        name: "Release ${{ github.ref_name }}"
        body: |
          ## Changes in ${{ github.ref_name }}
          
          **Download the JAR file:**
          - [ManifestEditor JAR](${{ env.FILE_NAME }})
          
          **Usage:**
          ```bash
          java -jar ManifestEditor-${{ github.ref_name }}.jar --help
          ```
          
          **Commit:** ${{ github.sha }}
          **Branch:** ${{ github.ref_name }}
          
          Auto-generated release notes are provided below.
          
    - name: Comment on PR (for pull requests)
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `üéâ **Build completed successfully!**
            
            üì¶ **Artifact:** \`${{ env.ARTIFACT_NAME }}\`
            üîó **Download:** Available in the [Actions tab](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
            üìù **Commit:** ${{ github.sha }}
            
            The JAR file is ready for testing!`
          })
